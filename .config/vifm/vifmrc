" TODO Generally this file is one big todo
" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 31 August, 2021)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=svim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" This is how many directories to store in the directory history.
set history=200

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=500

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme Default-256 Default

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%d-%m-%y\ %H:%M:%S

"        FORMAT controls the output.  Interpreted sequences are:
"        %%     a literal %
"        %a     locale's abbreviated weekday name (e.g., Sun)
"        %A     locale's full weekday name (e.g., Sunday)
"        %b     locale's abbreviated month name (e.g., Jan)
"        %B     locale's full month name (e.g., January)
"        %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)
"        %C     century; like %Y, except omit last two digits (e.g., 20)
"        %d     day of month (e.g., 01)
"        %D     date; same as %m/%d/%y
"        %e     day of month, space padded; same as %_d
"        %F     full date; like %+4Y-%m-%d
"        %g     last two digits of year of ISO week number (see %G)
"        %G     year of ISO week number (see %V); normally useful only with %V
"        %h     same as %b
"        %H     hour (00..23)
"        %I     hour (01..12)
"        %j     day of year (001..366)
"        %k     hour, space padded ( 0..23); same as %_H
"        %l     hour, space padded ( 1..12); same as %_I
"        %m     month (01..12)
"        %M     minute (00..59)
"        %n     a newline
"        %N     nanoseconds (000000000..999999999)
"        %p     locale's equivalent of either AM or PM; blank if not known
"        %P     like %p, but lower case
"        %q     quarter of year (1..4)
"        %r     locale's 12-hour clock time (e.g., 11:11:04 PM)
"        %R     24-hour hour and minute; same as %H:%M
"        %s     seconds since the Epoch (1970-01-01 00:00 UTC)
"        %S     second (00..60)
"        %t     a tab
"        %T     time; same as %H:%M:%S
"        %u     day of week (1..7); 1 is Monday
"        %U     week number of year, with Sunday as first day of week (00..53)
"        %V     ISO week number, with Monday as first day of week (01..53)
"        %w     day of week (0..6); 0 is Sunday
"        %W     week number of year, with Monday as first day of week (00..53)
"        %x     locale's date representation (e.g., 12/31/99)
"        %X     locale's time representation (e.g., 23:13:48)
"        %y     last two digits of year (00..99)
"        %Y     year
"        %z     +hhmm numeric time zone (e.g., -0400)
"        %:z    +hh:mm numeric time zone (e.g., -04:00)
"        %::z   +hh:mm:ss numeric time zone (e.g., -04:00:00)
"        %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)
"        %Z     alphabetic time zone abbreviation (e.g., EDT)
"        By  default,  date pads numeric fields with zeroes.  The following optional flags may
"        follow '%':
"        -      (hyphen) do not pad the field
"        _      (underscore) pad with spaces
"        0      (zero) pad with zeros
"        +      pad with zeros, and put '+' before future years with >4 digits
"        ^      use upper case if possible
"        #      use opposite case if possible
"        After any flags comes an optional field width, as a decimal number; then an  optional
"        modifier,  which  is either E to use the locale's alternate representations if avail‐
"        able, or O to use the locale's alternate numeric symbols if available.

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=5

" Don't do too many requests to slow file systems

if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look
set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

set mintimeoutlen=100
set timeoutlen=10000

set mouse='a'

" I'm not brave enough
"set number
"set relativenumber

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" ------------------------------------------------------------------------------
" And some default files that I won't use

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Who needs files for that
" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" ------------------------------------------------------------------------------

filextype {*.pdf},<application/pdf>
    \ zathura %f %i &, 
    \ tzathura %f &, 
    \ mupdf %f %i &,
    \ zathura %c %i &, 
    \ mupdf %c %i &,

fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

filextype {*.epub},<application/epub>
    \ zathura %f %i &,
    \ zathura %c %i &,
    \ tzathura %f &,

filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
    \ zathura %f %i &,
    \ zathura %c %i &,
    \ tzathura %f &,
    \ gv %f %i &
    \ gv %c %i &

filextype {*.djvu},<image/vnd.djvu>
    \ {View in zathura}
    \ tzathura %f &,
    \ zathura %f %i &,

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*>
       \ {Play using mpv}
       \ mpv %f %i &,
       \ {Play using vlc}
       \ vlc %f %i &,
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,

" Audio
fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*>
       \ mediainfo %f,
       \ file %f,

fileviewer {*.mp3},<audio/mpeg> mp3info
fileviewer {*.flac},<audio/flac> soxi

filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]},
         \<video/*>
        \ {View using mpv}
        \ mpv %f %i &,
        \ {View using vlc}
        \ vlc %f %i &,
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f,

fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
    \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
    \*.as[fx]},
    \<video/*>
    \ mediainfo %c,
    \ ffprobe -pretty %c 2>&1,
    \ file %c,

filextype {*.html,*.htm},<text/html>
        \ {Open with surf}
        \ surf %f %i &,
        \ {Open with firefox}
        \ qutebrowser %f %i &,
        \ {Open with firefox}
        \ firefox %f %i &,

filetype {*.html,*.htm},<text/html>
    \ w3m,
    \ links,
    \ lynx,

" Object
filetype {*.o},<application/x-object>
    \ nm %f | less,
    \ strings %f | less,

fileviewer {*.o},<application/x-object>
    \ nm %f,
    \ strings %f,

" Images
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ {View in sxiv}
        \ feh %f %i,
        \ {View in sxiv}
        \ sxiv %f %i,
        \ pinta %f %i,
        \ gimp %f %i,

fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
         \ mediainfo %f
         \ identify %f

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,

" TODO filetype, that will be tricky
" Torrent
filextype {*.torrent},<application/x-bittorrent>
    \ qbittorrent %f &

fileviewer {*.torrent},<application/x-bittorrent>
    \ dumptorrent -v %c

filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
    \<application/zip,application/java-archive>
    \ unzip %c | less,

    " Some day
    " \ {Mount with fuse-zip}
    " \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,

" fileviewer *.zip,*.jar,*.war,*.ear,*.oxt
fileviewer {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
    \ {View contents}
    \ zip -sf %c | less,
    \ unzip -l %f | less,

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,*.tzst},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,

fileviewer *.tgz,*.tar.gz 
    \ tar -tzf %c

fileviewer *.tar.bz2,*.tbz2
    \ tar -tjf %c

fileviewer *.tar.xz,*.txz
    \ tar -tJf %c

fileviewer *.tar.zst,*.tzst
    \ tar -t --zstd -f %c

fileviewer {*.tar},<application/x-tar> 
    \ tar -tf %c | less

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,

fileviewer {*.rar},<application/x-rar> 
    \ unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &

fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -

" TODO spreadsheets

" For that i would need some better graphical file manager
" Directories
"filextype */
"        \ {View in pcmanfm}
"        \ pcmanfm %f &,

filetype {*.[1-9]}
    \ man ./%c

fileviewer {*.[1-9]}
    \ man ./%c | col -b

" TODO languages and fucking style
fileviewer {?*.c,?*.cpp,?*.s,?*.asm,?*.fth,?*.4th
    \?*.rs,?*.hs,?*.go,?*.ml,?*.nim,?*.zig,?*.jl,
    \?*.java,?*.d,?*.clj,?*.scala,
    \?*.py,?*.lua,?*.sh,?*.tcl,?*.vim,?*.vifm
    \?*.cl,?*.lisp,?*.scm,?*.nix,?*.dhall,
    \?*.html,?*.htm,?*.css,
    \?*.r,?*.js,?*rb,
    \?*.mzn,?*.pl,
    \?*.json,?*.toml,?*.yml,?*.xml,?*.conf,?*.ini,
    \?*.md,?*.csv,?*.tsv,
    \Makefile,?*.cmake,
    \.git*,
    \}
    \ highlight -O truecolor -s easter %c,
    \ bat %c,

" TODO cmake and other weird edge cases
" Doesn't automatically recognize :(
" \?*rc,?*common,?*local,?*dump,?*history,?*resources,?*setup

" Hopefully this is correct
fileviewer <text/troff>
    \ highlight -O truecolor -s easter %c,
    \ man ./%c | col -b

filetype {?*.c,?*.cpp,?*.s,?*.asm,?*.fth,?*.4th
    \?*.rs,?*.hs,?*.go,?*.ml,?*.nim,?*.zig,?*.jl,
    \?*.java,?*.d,?*.clj,?*.scala,
    \?*.py,?*.lua,?*.sh,?*.tcl,?*.vim,?*.vifm
    \?*.cl,?*.lisp,?*.scm,?*.nix,?*.dhall,
    \?*.html,?*.htm,?*.css,
    \?*.r,?*.js,?*rb,
    \?*.mzn,?*.pl,
    \?*.json,?*.toml,?*.yml,?*.xml,?*.conf,?*.ini,
    \?*.json,?*.toml,?*.yml,?*.xml,?*.conf,?*.ini,
    \?*.md,?*.csv,?*.tsv,?*.txt,
    \Makefile,?*.cmake,
    \?*rc,?*common,?*local,?*dump,?*history,?*resources,?*setup
    \.git*,
    \},<text/troff>
    \ svim %f,
    \ nvim %f,
    \ vim %f,
    \ kak %f,
    \ vis %f,
    \ emacs -nw %f,
    \ mg %f,
    \ vi %f,
    \ bat %f,

filetype <text/troff>
    \ man ./%c,

" WHAT, 
" TODO highlighting for languages, that would be painful
" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer %"f &

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------

" Sample mappings

" Start shell in current directory
" nnoremap S :shell<cr>

" Display sorting dialog
nnoremap s :sort<cr>

" TODO B
" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv
nmap W <S-Tab>
qmap W <S-Tab>
nmap ,w :view<cr><S-Tab>
qmap ,w <S-Tab>:view<cr>

" TODO A gvim
" Open file in existing instance of gvim
nnoremap o :!gvim --remote-tab-silent %f<cr>
" Open file in new instance of gvim
nnoremap O :!gvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!xterm &<cr>

" TODO A gvim
" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

"" Example of standard two-panel file managers mappings
"nnoremap <f3> :!less %f<cr>
"nnoremap <f4> :edit<cr>
"nnoremap <f5> :copy<cr>
"nnoremap <f6> :move<cr>
"nnoremap <f7> :mkdir<space>
"nnoremap <f8> :delete<cr>

"" Midnight commander alike mappings
"" Open current directory in the other pane
"nnoremap <a-i> :sync<cr>
"" Open directory under cursor in the other pane
"nnoremap <a-o> :sync %c<cr>
"" Swap panes
""nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" Compatible with my vim config
nmap ,<Space> :set hls!<CR>
map ,qw :echo system("du -sh ".expand("%f"))<CR>
map <Space> <C-w>

" Uncompatible
nmap g! :shell<CR>

let $localConf = '~/.config/vifm/vifmrc-local'

if filereadable($localConf)
"    :source $localConf<CR>
    echo "Local config loaded"
    nmap ,h :echo "Doesn't work :("<CR>
endif

map go :file<CR>
