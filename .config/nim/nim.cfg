# Configuration file for the Nim Compiler.

# You may set environment variables with
# @putenv "key" "val"
# Environment variables can be accessed like so:
#  gcc.path %= "$CC_PATH"

cc = gcc

# additional options always passed to the compiler:
--parallel_build: "0" # 0 to auto-detect number of processors

experimental:strictFuncs
experimental:implicitDeref

experimental:parallel
experimental:views

experimental:strictNotNil
experimental:codeReordering

@if inc:
    incremental:on
@end

@if not (release or danger or debug or normal):
    d:release
@end

@if release or danger:
    checks:off
    debuginfo:off
@else
    checks:on
@end

@if danger:
    styleCheck:off
    d:silent
@end

@if debug:
    debuginfo:on
    checks:on
    lineTrace:on
    stacktrace:on
@end

# script mode activated with
#!/usr/bin/env -S nim c -d:script
# on first line when on unix
# Works much better than nim e

@if gscript:
    r
    d:release
    d:silent
    incremental:on
    checks:on

@elif script:
    r
    d:release
    d:silent
    incremental:on
    checks:on
    cc:tcc
    tlsEmulation:on

    # TODO better mm when available
    # TODO benchmark gc's, boehm is fastest
    # in compilation but doesn't work with
    # incremental

@elif tscript:
    r
    d:release
    d:silent
    checks:on
    cc:tcc
    tlsEmulation:on
    mm:boehm

@else
    styleCheck:hint
    d:strip
@end

@if silent:
    hints:off
    warnings:off
    styleCheck:off
    debuginfo:off
@end

@if unix:
  @if bsd:
    # BSD got posix_spawn only recently, so we deactivate it for osproc:
    define:useFork
  @elif haiku:
    gcc.options.linker = "-Wl,--as-needed -lnetwork"
    gcc.cpp.options.linker = "-Wl,--as-needed -lnetwork"
    clang.options.linker = "-Wl,--as-needed -lnetwork"
    clang.cpp.options.linker = "-Wl,--as-needed -lnetwork"
    tcc.options.linker = "-Wl,--as-needed -lnetwork -lm"
  @elif not genode:
    # -fopenmp
    gcc.options.linker = "-ldl"
    gcc.cpp.options.linker = "-ldl"
    clang.options.linker = "-ldl"
    clang.cpp.options.linker = "-ldl"
    tcc.options.linker = "-ldl -lm"
  @end
@end

gcc.options.speed = "-Ofast -fno-strict-aliasing -fno-ident"
gcc.options.size = "-Os -fno-ident"
@if windows:
  gcc.options.debug = "-g3 -Og -gdwarf-3"
@else:
  gcc.options.debug = "-g3 -Og"
@end
gcc.cpp.options.speed = "-Ofast -fno-strict-aliasing -fno-ident"
gcc.cpp.options.size = "-Os -fno-ident"
gcc.cpp.options.debug = "-g3 -Og"
#passl = "-pg"

# Configuration for the LLVM GCC compiler:
llvm_gcc.options.debug = "-g"
llvm_gcc.options.always = "-w"
llvm_gcc.options.speed = "-Ofast"
llvm_gcc.options.size = "-Os"

# Configuration for the LLVM CLang compiler:
clang.options.debug = "-g"
clang.cpp.options.debug = "-g"
clang.options.always = "-w -ferror-limit=3"
clang.options.speed = "-Ofast"
clang.options.size = "-Os"

#@if lto or lto_incremental:
#  @if lto_incremental:
#   vcc.options.always%= "${vcc.options.always} /GL /Gw /Gy"
#   vcc.cpp.options.always%= "${vcc.cpp.options.always} /GL /Gw /Gy"
#   vcc.options.linker %= "${vcc.options.linker} /link /LTCG:incremental"
#   vcc.cpp.options.linker %= "${vcc.cpp.options.linker} /link /LTCG:incremental"
#  @else:
#   vcc.options.always%= "${vcc.options.always} /GL"
#   vcc.cpp.options.always%= "${vcc.cpp.options.always} /GL"
#   vcc.options.linker %= "${vcc.options.linker} /link /LTCG"
#   vcc.cpp.options.linker %= "${vcc.cpp.options.linker} /link /LTCG"
#  @end
#  clang_cl.options.always%= "${clang_cl.options.always} -flto"
#  clang_cl.cpp.options.always%= "${clang.cpp.options.always} -flto"
#  clang.options.always%= "${clang.options.always} -flto"
#  clang.cpp.options.always%= "${clang.cpp.options.always} -flto"
#  icl.options.always %= "${icl.options.always} /Qipo"
#  icl.cpp.options.always %= "${icl.cpp.options.always} /Qipo"
#  gcc.options.always %= "${gcc.options.always} -flto"
#  gcc.cpp.options.always %= "${gcc.cpp.options.always} -flto"
#  clang.options.linker %= "${clang.options.linker} -fuse-ld=lld -flto"
#  clang.cpp.options.linker %= "${clang.cpp.options.linker} -fuse-ld=lld -flto"
#  gcc.options.linker %= "${gcc.options.linker} -flto"
#  gcc.cpp.options.linker %= "${gcc.cpp.options.linker} -flto"
#@end

#@if strip:
#  gcc.options.linker %= "${gcc.options.linker} -s"
#  gcc.cpp.options.linker %= "${gcc.cpp.options.linker} -s"
#  clang.options.linker %= "${clang.options.linker} -s"
#  clang.cpp.options.linker %= "${clang.cpp.options.linker} -s"
#@end
