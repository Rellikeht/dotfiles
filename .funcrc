#!/usr/bin/env bash

# {{{ helpers
dir_arg() {
    if [ -z "$1" ]; then
        echo "."
    else
        echo "$1"
    fi
}

find_command() {
    local SWITCH ALL DIR PATTERN
    SWITCH="$1"
    ALL="$2"
    DIR=.
    shift 2

    if [ -d "$1" ]; then
        DIR="$1"
        shift
    fi

    if [ -n "$1" ]; then
        PATTERN="$ALL$1$ALL"
        shift
    else
        PATTERN="$ALL"
    fi

    find_system_special "$DIR" "$SWITCH" "$PATTERN" $@
}

noerr() {
    "$@" 2>/dev/null
}

silent() {
    noerr "$@" >/dev/null
}
# }}}

# {{{ important stuff

lh() {
    if [ -n "$1" ]; then
        ls -t | sed "$1q"
    else
        ls -t | sed 12q
    fi
}

cdc() {
    # return is lsp suggestion
    if [ -z "$1" ]; then
        cd || return
    elif [ -d "$1" ]; then
        cd "$1" || return
    fi
    clear
}

cdl() {
    cdc "$1"
    ls
}

cdll() {
    cdc "$1"
    ll
}

dis() {
    silent "$@" &
    disown
}

# }}}

# {{{ editors

edt() {
    if [ -n "$2" ]; then
        $1 "$@"
    else
        svim "$1"
    fi
}

eal() {
    edt $1 /etc/.aliasrc
}

efn() {
    edt $1 /etc/.funcrc
}

evr() {
    edt $1 /etc/.varrc
}

# }}}

if [ "$(uname)" = "FreeBSD" ]; then # {{{
    find_system_special() {
        find -E "$@" # TODO
    }

    TOUCHPAD_CMD='doas sysctl hw.psm.synaptics.touchpad_off'
    ttgl() {
        if [ "$(sysctl -n hw.psm.synaptics.touchpad_off)" == 0 ]; then
            eval "$TOUCHPAD_CMD=1" >/dev/null
        else
            eval "$TOUCHPAD_CMD=0" >/dev/null
        fi
    }

    hm() {
        help2man $@ | mandoc | less
    }
    # }}}

else # {{{

    find_system_special() {
        local D
        D="$1"
        shift
        find "$D" -regextype posix-extended $@
    }

    wat() {
        local WTIME # COMMAND
        if [ "$1" -gt 0 ] 2>/dev/null; then
            WTIME="$1"
            shift
        else
            WTIME=1
            # COMMAND="$@"
        fi
        watch -n "$WTIME" -d "$@"
    }

    watc() {
        local T
        T="$1"
        shift
        wat "$T" -c "$@"
    }

    hm() {
        help2man $@ | man /dev/stdin
    }
fi
# }}}

# {{{ find
fnd() {
    find_command -name '*' $@
}

fndi() {
    find_command -iname '*' $@
}

fnds() {
    find_command -regex '.*' $@
}

fndr() {
    find_command -iregex '.*' $@
}

fnde() {
    find_command -name '' $@
}

fndie() {
    find_command -name '' $@
}

fndse() {
    find_command -regex '' $@
}

fndre() {
    find_command -regex '' $@
}
# }}}

# {{{ nice additions

hms() {
    hm --no-discard-stderr $@
}

viminfo() {
    vim -R -M -c "Info $1 $2" +only
}

rlw() {
    readlink -f "$(/usr/bin/env which "$1")"
}

bins() {
    pkgf "$@" | grep -E "${PATH//:/|}"
}

# vifm cd (from vifm wiki)
vcd() {
    local dst
    dst="$(command vifm --choose-dir - "$@")"
    if [ -z "$dst" ]; then
        echo 'Directory picking cancelled/failed'
        return 1
    fi
    cd "$dst"
}

bigh() {
    local FILE
    FILE="$1"
    shift
    high "$FILE" | bat $@
}

aigh() {
    high $@ | bat
}

# }}}

# {{{ fzf

# Basically find piped to fzf with history
fzh() {
    local FZF FZH_FILE TEMP
    FZF="$1"
    shift
    FZH_FILE="$HOME/.$FZF-hist-file"
    TEMP=$(mktemp) # This should be helpful
    touch "$FZH_FILE"
    cat "$FZH_FILE" >"$TEMP"

    local FFC
    FFC=$(
        ! find $@ |
            cat "$TEMP" - |
            eval "$FZF"
    )

    echo -n "$FFC" |
        xargs -d'\n' -I{} sh -c \
            "! grep -x \"{}\" \"$TEMP\" &>/dev/null &&\
        echo \"{}\" >> \"$FZH_FILE\" "

    rm "$TEMP"
    echo "$FFC"
}

# TODO ??
#dirf () {
#	local D
#	D=$(dir_arg "$1")
#	noerr find_system_special "$D" -maxdepth 2 -type d -a \
#		-regex "${D%/}(/[^.][^/]*)*" | \
#		fzy
#}
#
#alias dirfp='dirf ..'

#alias cf='cd $(dirf)'
#alias cfp='cd $(dirfp)'

# }}}

# {{{ multimedia

mps() {
    local START="$1"
    shift
    mpv --start="$START" $@
}

mpp() {
    local PROF="$1"
    shift
    mpv --profile="$PROF" $@
}

ytdg() {
    local QUAL FORM
    if [ -n "$2" ]; then
        QUAL="$1"
        shift
    fi
    if [ -n "$2" ]; then
        FORM="$1"
        shift
    fi
    yts -f "ba+bv[height>=$QUAL]/best[height>=$QUAL]$FORM" $@
}

ytda() {
    local QUAL FORM LANG
    if [ -n "$2" ]; then
        LANG="$1"
        shift
    fi
    if [ -n "$2" ]; then
        QUAL="$1"
        shift
    fi
    if [ -n "$2" ]; then
        FORM="$1"
        shift
    fi
    yts -f "ba[language=$LANG]+bv[height>=$1]/best[height>=$1]$FORM" $@
}

trm() {
    local DIR
    DIR="$(readlink -f .)"
    [ -z "$2" ] && DIR="$2"
    transmission-remote -t "$1" --move "$DIR"
}

# }}}

# {{{ random stuff

maxe() {
    if [ -n "$2" ]; then
        cmds="$2"
        prec="$1"
    else
        cmds="$1"
        prec=20
    fi
    str=$(echo -n "$cmds" | sed -z 's/[^;$\n]$/\0;/')
    maxima --very-quiet --batch-string="fpprec:$prec \$ fpprintprec:$prec \$ $str quit();" |
        sed -z 's/load[^\n]*\n[^\n]*\n//g' |
        grep -E '^[ 	]|\$|b0$|]$'
}

gple() {
    gpe "plot '$1' using $2 w l"
}

ariad() {
    local FILE

    if [ -f "$1" ]; then
        FILE="$(pwd)/$1"
    else
        FILE="$1"
    fi

    aria -D -d "$(pwd)" "$FILE" $@
}

# }}}
